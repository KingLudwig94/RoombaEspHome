esphome:
  name: roomba
  platform: ESP8266
  board: d1_mini

  includes:
    - roomba_uart_component.h
  libraries:
    #- Roomba=https://github.com/davidecavestro/Roomba.git
    #- Roomba=https://github.com/Apocrathia/Roomba

# Enable logging
logger:
  hardware_uart: UART1
# Enable Home Assistant API
api:

ota:

uart:
  id: uart_bus
  tx_pin: TX
  rx_pin: RX
  baud_rate: 115200
  debug:
    sequence:
      lambda: UARTDebug::log_int(direction, bytes, ':');


wifi:
  ssid: iBargaggez
  password: "#Ramaiolo1994"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Roomba Fallback Hotspot"
    password: asdasdafetgsfds45asd687aw
    
captive_portal:

substitutions:
  init: 'RoombaComponent::instance(id(uart_bus),10000, D2);'

sensor:
  - platform: custom
    lambda: |-
      auto roomba = ${init};
      App.register_component(roomba);
      return {roomba->battery_charge, roomba->battery_temp, roomba->speed, roomba->radius};
    sensors:
      - name: "Battery"
      - name: "Temperatura roomba"
      - name: "Speed"
      - name: "Radius"
      
text_sensor:
  - platform: custom
    lambda: |-
      auto roomba = ${init};
      //App.register_component(roomba);
      return {roomba->roombaState};
    text_sensors:
      - name: "State"
        
button:
  - platform: template
    name: "Avanti"
    icon: "mdi:arrow-up-bold"
    on_press:
      then: 
        - lambda: |-
            auto roomba = ${init};
            roomba->driveForward();
            return;
  - platform: template
    name: "Indietro"
    icon: "mdi:arrow-down-bold"
    on_press:
      then: 
        - lambda: |-
            auto roomba = ${init};
            roomba->driveBackwards();
            return;
  - platform: template
    name: "Stop"
    icon: "mdi:stop"
    on_press:
      then: 
        - lambda: |-
            auto roomba = ${init};
            roomba->stopMove();
            return;
  - platform: template
    name: "CW"
    icon: "mdi:reload"
    on_press:
      then: 
        - lambda: |-
            auto roomba = ${init};
            roomba->driveCW();
            return;
  - platform: template
    name: "CCW"
    icon: "mdi:restore"
    on_press:
      then: 
        - lambda: |-
            auto roomba = ${init};
            roomba->driveCCW();
            return;
  - platform: template
    name: "Left"
    icon: "mdi:arrow-left-bold"
    on_press:
      then: 
        - lambda: |-
            auto roomba = ${init};
            roomba->driveLeft();
            return;
  - platform: template
    name: "Right"
    icon: "mdi:arrow-right-bold"
    on_press:
      then: 
        - lambda: |-
            auto roomba = ${init};
            roomba->driveRight();
            return;
  - platform: template
    name: "Clean"
    icon: "mdi:vacuum"
    on_press:
      then: 
        - lambda: |-
            auto roomba = ${init};
            roomba->startCleaning();
            return;
  - platform: template
    name: "Stop cleaning"
    icon: "mdi:stop"
    on_press:
      then: 
        - lambda: |-
            auto roomba = ${init};
            roomba->stopCleaning();
            return;
  - platform: template
    name: "Dock"
    icon: "mdi:fuel-cell"
    on_press:
      then: 
        - lambda: |-
            auto roomba = ${init};
            roomba->return_to_base();
            return;
  - platform: template
    name: "Spot"
    icon: "mdi:camera-metering-spot"
    on_press:
      then: 
        - lambda: |-
            auto roomba = ${init};
            roomba->startSpot();
            return;

# custom_component:
# - lambda: |-
#     auto roomba = new RoombaComponent(id(uart_bus),3000,4);
#     App.register_component(roomba);
#     return {roomba};
#   # components:
#   #   - id: roomba
    

